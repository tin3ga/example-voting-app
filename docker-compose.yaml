services:
  db:
    image: postgres:15-alpine
    container_name: db
    ports:
      - "5432:5432"  
    environment:
      POSTGRES_USER: postgres        
      POSTGRES_PASSWORD: postgres 
      POSTGRES_DB: postgres   
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: 5s
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks:ro" 
    networks:
      - backend

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: 5s
    volumes:
      - "./healthchecks:/healthchecks:ro"
    networks:
      - backend
  vote:
    container_name: vote
    build:
      context: ./vote
      dockerfile: Dockerfile
      target: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"] # curl dep required in docker file
      interval: 20s
      timeout: 5s
      retries: 4
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8080:80"
    networks:
      - frontend
      - backend
  worker:
    container_name: worker
    build:
      context: ./worker
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend
  results:
    container_name: result
    build:
      context: ./result
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:80"
    networks:
      - frontend
      - backend

  seed:
    container_name: seed
    build:
      context: ./seed-data
      dockerfile: Dockerfile

    profiles: ["seed"] # run docker compose --profile seed up
    depends_on:
      vote:
        condition: service_healthy 
    networks:
      - frontend
    restart: "no"

volumes:
  postgres-data:

networks:
  frontend:
  backend: